#! /usr/local/Nuke14.1v2/libnuke-14.1.2.so -nx
version 14.1 v2
Group {
name GradePass
 inputs 2
 autolabel "nuke.thisNode().name() + \"\\n\" + nuke.thisNode()\['settings_label_input'].value()                                                   "
 tile_color 0x1869fff
 addUserKnob {20 settings_tab l Settings}
 addUserKnob {1 tag l "" +STARTLINE +INVISIBLE}
 tag gradepass
 addUserKnob {26 titre l "" +STARTLINE +INVISIBLE T "\n<br><font size=7>  Grade<font color=\"#FCB132\"><font size=7><b>Pass</color><br>"}
 addUserKnob {26 "" +INVISIBLE}
 addUserKnob {26 layers_options_text l "@b;Options:" +INVISIBLE}
 addUserKnob {22 layers_options_add_layer_pyscript l "<font size=3><b>Add Layer" T "#------------------------------------------------------------------------------#\n#-------------------------------------------------------------------- HEADER --#\n\n\"\"\"\n:synopsis:\n    Script to control the GradePass node\n\n\"\"\"\n\n#------------------------------------------------------------------------------#\n#------------------------------------------------------------------- IMPORTS --#\n\n\nimport nuke\n\n# ---------------------------------------------------------------------------- #\n# ----------------------------------------------------------------- GLOBALS -- #\n\nDEFAULT_COLOR = 25599999\nWARNING_COLOR = 2610898687\nERROR_COLOR = 2671189247\n\n\nclass NodeCoord(object):\n    \"\"\"\n    Main class object to get basic node coordination information\n    \"\"\"\n    def __init__(self, node):\n        if node.screenWidth == 0:\n            nuke.autoplaceSnap(node)\n        self.width = node.screenWidth()\n        self.height = node.screenHeight()\n        self.x = node\[\"xpos\"].value()\n        self.y = node\[\"ypos\"].value()\n        if nuke.GUI:\n            self.cent_x = self.x + (self.width // 2)\n            self.cent_y = self.y + (self.height // 2)\n\ndef knobChanged():\n    n = nuke.thisNode()\n    k = nuke.thisKnob()\n    if nuke.GUI:\n        if k.name() == \"settings_mask_isolate_check\":\n            if n\[k.name()].value():\n                n\[\"tile_color\"].setValue(WARNING_COLOR)\n            else:\n                n\[\"tile_color\"].setValue(DEFAULT_COLOR)\n\n        if \"_out\" in k.name():\n            if \"RGBA_\" in n\[k.name()].value() or n\[k.name()].value() == \"none\":\n                n\[\"tile_color\"].setValue(DEFAULT_COLOR)\n                n\[\"disable\"].setValue(False)\n            else:\n                n\[\"tile_color\"].setValue(ERROR_COLOR)\n                n\[\"disable\"].setValue(True)\n\ndef onCreate():\n    n = nuke.thisNode()\n    knobs = n.knobs()\n    for knob in knobs:\n        if \"_link\" in knob:\n            if \"RGBA_\" in n\[knob].value() or n\[knob].value() == \"none\":\n                n\[\"tile_color\"].setValue(DEFAULT_COLOR)\n                n\[\"disable\"].setValue(False)\n            else:\n                n\[\"tile_color\"].setValue(ERROR_COLOR)\n                n\[\"disable\"].setValue(True)\n\n\n#------------------------------------------------------------------------------#\n#----------------------------------------------------------------- FUNCTIONS --#\n\ndef create_node(node_type, title=None, **kwargs):\n    node = nuke.createNode(node_type, inpanel=False)\n    node\[\"selected\"].setValue(False)\n\n    add_knob_value(node, **kwargs)\n\n    if title:\n        add_label(node, title)\n    return node\n\ndef add_layer():\n    \"\"\"This will add an entry to let the user chose a layer to grade\"\"\"\n    # Get this node\n    for node in nuke.allNodes():\n        node\['selected'].setValue(False)\n    n = nuke.thisNode()\n\n    # Get current layer name and +1 for next layer\n    layer_count = n\[\"layer_count\"].value()\n\n    # Check to limit the layer to 10 since some artist abuse it !\n    if layer_count >= 11:\n        nuke.message(\"No Dayne.... No!\")\n        return\n#TODO a verifier lors de remove le decompte passe a -1 creant bug quand on reAddlayer car on commenceera a -1 au lieu de 0\n    layer_name = \"layer_\{\}\".format(int(layer_count))\n    n\[\"layer_count\"].setValue(layer_count + 1)\n\n    # Get builders node and their top node\n    out_builder_node = nuke.toNode(\"out_builder_dot\")\n    out_builder_top_node = out_builder_node.input(0)\n\n    graded_builder_node = nuke.toNode(\"graded_builder_dot\")\n    graded_builder_top_node = graded_builder_node.input(0)\n\n    in_builder_node = nuke.toNode(\"in_builder_dot\")\n    in_builder_top_node = in_builder_node.input(0)\n\n    ### CREATE MERGE OUT NODEs\n    # Create Nodes\n    merge_out_node = create_node(\"Merge2\")\n    merge_out_node\[\"name\"].setValue(\"\{0\}_out\".format(layer_name))\n    merge_out_node\[\"operation\"].setValue(\"plus\")\n    merge_out_node\[\"Achannels\"].setValue(\"none\")\n    merge_out_node\[\"output\"].setValue(\"rgb\")\n    merge_out_node\[\"knobChanged\"].setValue(\"layer_link_autolabel= '\{0\}'\\n\"\n                          \"layer_knobChanged()\")\n\n    # flag it\n    merge_out_node\[\"Achannels\"].setFlag(0x00000001) #no checkmarks\n    merge_out_node\[\"Achannels\"].setFlag(0x00000002) #no alpha\n\n    # Move it\n    under(merge_out_node, out_builder_top_node, offset=24)\n\n    # Connect it\n    merge_out_node.setInput(0, out_builder_top_node)\n    merge_out_node.setInput(1, out_builder_top_node)\n    out_builder_node.setInput(0, merge_out_node)\n\n    ### CREATE MERGE IN NODES\n    # Create it\n    merge_in_node = create_node(\"Merge2\")\n    merge_in_node\[\"name\"].setValue(\"\{0\}_in\".format(layer_name))\n    merge_in_node\[\"operation\"].setValue(\"copy\")\n    merge_in_node\[\"Achannels\"].setExpression(\"\{0\}.Achannels\".format(merge_out_node.name()))\n    merge_in_node\[\"Bchannels\"].setValue(\"none\")\n\n    # Expressions\n    merge_in_node\[\"output\"].setExpression(\"\{0\}.Achannels\".format(merge_out_node.name()))\n    merge_in_node\[\"disable\"].setExpression(\"\{0\}.disable\".format(merge_out_node.name()))\n\n    # Flag it\n    merge_in_node\[\"Achannels\"].setFlag(0x00000001)\n    merge_in_node\[\"Achannels\"].setFlag(0x00000002)\n    merge_in_node\[\"output\"].setFlag(0x00000001)\n    merge_in_node\[\"output\"].setFlag(0x00000002)\n\n    merge_in_dot = create_node(\"Dot\")\n    merge_in_dot\[\"name\"].setValue(\"\{0\}_dot\".format(layer_name))\n\n    # Move it\n    under(merge_in_node, in_builder_top_node, offset=24)\n    under(merge_in_dot, graded_builder_top_node, offset=24)\n\n    # Connect it\n    merge_in_node.setInput(1, merge_in_dot)\n    merge_in_node.setInput(0, in_builder_top_node)\n    in_builder_node.setInput(0, merge_in_node)\n    merge_in_dot.setInput(0, graded_builder_top_node)\n    graded_builder_node.setInput(0, merge_in_dot)\n\n\n    ### CREATE UI ENTRY\n    # Name it\n    layer_link_name = \"\{0\}_link\".format(layer_name)\n\n    # Create it\n\n    layer_link_knob = nuke.Link_Knob(\"\")\n    layer_link_knob.setName(layer_link_name)\n    layer_link_knob.setLabel(\"<font size=3 color=White>Layer:\")\n    layer_link_knob.setValue(\"none\")\n\n    # Link it\n    layer_link_knob.makeLink(merge_out_node.name(), \"Achannels\")\n\n    # Autolabel entry\n    layer_link_autolabel = '+ nuke.thisNode()\[\"\{0\}\"].value()'.format(layer_link_name)\n\n    # Remove Button\n    remove_knob = nuke.PyScript_Knob(\"\{0\}_remove\".format(layer_name), \"X\")\n    remove_knob.setLabel(\"<font size=3 color=White>X\")\n    remove_knob.setValue(\"layer_link_autolabel= '\{0\}'\\n\"\n                         \"node = nuke.thisNode()\\n\"\n                         \"exec('remove_layer(\\\"\{1\}\\\", layer_link_autolabel)')\\n\"\n                         \"node\[\\\"layer_count\\\"].setValue(node\[\\\"layer_count\\\"].value() - 1)\\n\"\n                         \"if \\\"\{1\}_solo\\\" in node.knobs():\\n\"\n                         \"    node.removeKnob(node.knobs()\[\\\"\{1\}_solo\\\"])\".format(layer_link_autolabel, layer_name))\n\n    remove_knob.clearFlag(nuke.STARTLINE)\n\n    # Mute knob\n    mute_knob = nuke.PyScript_Knob(\"\{0\}_mute\".format(layer_name), \"mute\")\n    mute_knob.setValue(\"layer_link_autolabel = '\{0\}'\\n\"\n                       \"exec('mute_layer(\\\"\{0\}\\\")')\".format(layer_name))\n    # mute_knob.setValue(\"layer_link_autolabel= '\{0\}'\\n\"\n    #                     \"gradepass.mute_layer('\{0\}')\".format(layer_name))\n    mute_knob.setLabel(\"<font size=3 color=White>Mute\")\n\n    # Solo knob\n    # Création du bouton Solo\n    solo_knob = nuke.PyScript_Knob(\"\{0\}_solo\".format(layer_name), \"solo\")\n    # Définit la commande du bouton Solo\n    # solo_knob.setCommand(\"solo_layer('\{0\}')\".format(layer_name))\n    # solo_knob.setCommand(\"nuke.thisNode().knob('solo_layer_pyscript').execute()\")\n\n    solo_knob.setLabel(\"<font size=3 color=White>Solo\")\n    solo_knob.setValue(\"exec('solo_layer(\\\"\{0\}\\\")')\".format(layer_name))\n    # solo_knob.setValue(\"exec('import gradepass0; gradepass0.solo_layer(\\\"\{0\}\\\")')\".format(layer_name))\n    # solo_knob.setCommand(\"solo_layer(\\\"\{0\}\\\")\".format(layer_name))\n    # solo_knob.setCommand(\"nuke.thisNode()\['solo_layer_pyscript'].execute()\")\n    # solo_knob.setCommand(\"nuke.thisNode().knob('solo_layer_pyscript').execute()\")\n\n\n\n    # Reorder knobs to insert them at the correct position\n    knob_list = list(n.knobs().keys())\n    insert_index = knob_list.index(\"aovs_layers_text\") + 1\n\n    # Temporarily remove all knobs after the insertion point\n    knobs_to_readd = \[]\n    for i in range(insert_index, len(knob_list)):\n        knob_name = knob_list\[i]\n        knobs_to_readd.append(n.knobs()\[knob_name])\n        n.removeKnob(n.knobs()\[knob_name])\n\n\n    # Add knobs\n    n.addKnob(layer_link_knob)\n    n.addKnob(remove_knob)\n    n.addKnob(mute_knob)\n    n.addKnob(solo_knob)\n\n    for knob in knobs_to_readd:\n        n.addKnob(knob)\n\n\n    ### AUTOLABEL\n    # check if there is already an autolabel.\n    # If yes, take the current state of autolable knob instead of the node name\n    node_name = \"nuke.thisNode().name() + \\\"\\\\n\\\" + nuke.thisNode()\['settings_label_input'].value()\"\n    if n\[\"autolabel\"].value():\n        node_name = n\[\"autolabel\"].value()\n\n    #set the autolabel field with the updated link name\n    n\['autolabel'].setValue(\"\{0\} \{1\}\".format(node_name, \"+ \\\"\\\\n\\\" \{0\}\".format(layer_link_autolabel)))\n\ndef clear_all():\n    remove_buttons = \[r for r in nuke.thisNode().knobs() if '_remove' in r]\n    for r in remove_buttons:\n        nuke.thisNode()\[r].execute()\n        nuke.thisNode()\[\"layer_count\"].setValue(0)\n\ndef clear_muted():\n    n = nuke.thisNode()\n    nodes = nuke.allNodes()\n    for node in nodes:\n        if \"_out\" in node.name():\n            node\[\"disable\"].setValue(0)\n            node\[\"Achannels\"].setEnabled(True)\n            n\[node.name().replace(\"_out\", \"_mute\")].setLabel(\"<font size=3 color=White>Mute\")\n\ndef layer_knobChanged():\n    n = nuke.thisNode()\n    parent_node = nuke.thisParent()\n    k = nuke.thisKnob()\n    if k.name() == \"Achannels\":\n        if \"RGBA_\" in n\[k.name()].value() or n\[k.name()].value() == \"none\":\n            parent_node\[\"tile_color\"].setValue(DEFAULT_COLOR)\n            parent_node\[\"disable\"].setValue(False)\n        else:\n            parent_node\[\"tile_color\"].setValue(ERROR_COLOR)\n            parent_node\[\"disable\"].setValue(True)\n\ndef remove_layer(layer_name, autolabel):\n    \"\"\"Function to delete entry in the node\"\"\"\n\n    # Get this node\n    n = nuke.thisNode()\n\n    # Update autolabel\n    autolabel_list = n\[\"autolabel\"].value()\n    new_list = autolabel_list.replace(\"+ \\\"\\\\n\\\" \{0\}\".format(autolabel), \"\")\n    n\[\"autolabel\"].setValue(new_list)\n\n    # Liste des knobs à supprimer\n    knobs_to_remove = \[\n\n        \"\{0\}_mute\".format(layer_name),\n        \"\{0\}_link\".format(layer_name),\n        \"\{0\}_solo\".format(layer_name),  # Supprimer \"Solo\" en premier\n        \"\{0\}_remove\".format(layer_name)\n    ]\n    # Vérifier les knobs existants avant suppression\n    print(f\"Knobs existants avant suppression: \{n.knobs().keys()\}\")\n\n    # Supprimer chaque knob s'il existe\n    for knob_name in knobs_to_remove:\n        if knob_name in n.knobs():\n            print(f\"✔ Suppression de \{knob_name\}\")\n            n.removeKnob(n.knobs()\[knob_name])\n        else:\n            print(f\"⚠ Knob \{knob_name\} introuvable, peut-être déjà supprimé.\")\n\n    # Suppression des nœuds liés au layer\n    nodes = nuke.allNodes()\n    for node in nodes:\n        if layer_name in node.name():\n            nuke.delete(node)\n\n    # Réduction du nombre de layers\n    current_layer_count = n\[\"layer_count\"].value()\n    new_layer_count = max(0, current_layer_count - 1)  # Empêcher layer_count de descendre sous 0\n    n\[\"layer_count\"].setValue(new_layer_count)\n\n    # 🔄 Force un rafraîchissement complet\n    nuke.updateUI()  # Mise à jour standard\n    nuke.show(n)  # Force l'affichage du panneau\n\ndef mute_layer(layer_name):\n    node = nuke.thisNode()\n    merge_node = nuke.toNode(\"\{0\}_out\".format(layer_name))\n    node_state = merge_node\[\"disable\"].value()\n    if node_state:\n        node\[\"\{0\}_mute\".format(layer_name)].setLabel(\"<font size=3 color=White>Mute\")\n        node\[\"\{0\}_link\".format(layer_name)].setEnabled(True)\n        merge_node\[\"disable\"].setValue(0)\n    else:\n        node\[\"\{0\}_mute\".format(layer_name)].setLabel(\"<font size=3 color=Red>Mute\")\n        node\[\"\{0\}_link\".format(layer_name)].setEnabled(False)\n        merge_node\[\"disable\"].setValue(1)\n\ndef solo_layer(layer_name):\n    node = nuke.thisNode()\n    nodes = nuke.allNodes()\n\n    solo_active = node\[\"\{\}_solo\".format(layer_name)].label() == \"<font size=3 color=Red>Solo\"\n\n    for n in nodes:\n        if \"_out\" in n.name():\n            layer = n.name().replace(\"_out\", \"\")\n            is_selected = (layer == layer_name)\n\n            if solo_active:\n                # 🔄 Désactiver solo → Réactiver tout\n                node\[\"\{\}_mute\".format(layer)].setEnabled(True)\n                node\[\"\{\}_mute\".format(layer)].setLabel(\"<font size=3 color=White>Mute\")\n                node\[\"\{\}_link\".format(layer)].setEnabled(True)\n                node\[\"\{\}_solo\".format(layer)].setLabel(\"<font size=3 color=White>Solo\")\n                n\[\"disable\"].setValue(False)  # Réactiver le layer\n\n            else:\n                if is_selected:\n                    # 🔴 Activer solo sur ce layer (il doit rester actif)\n                    node\[\"\{\}_solo\".format(layer)].setLabel(\"<font size=3 color=Red>Solo\")\n                    node\[\"\{\}_mute\".format(layer)].setEnabled(True)\n                    node\[\"\{\}_mute\".format(layer)].setLabel(\"<font size=3 color=White>Mute\")\n                    node\[\"\{\}_link\".format(layer)].setEnabled(True)\n                    n\[\"disable\"].setValue(False)  # Garder ce layer actif\n\n                else:\n                    # 🔘 Mute et désactiver tous les autres layers\n                    node\[\"\{\}_mute\".format(layer)].setEnabled(True)\n                    node\[\"\{\}_mute\".format(layer)].setLabel(\"<font size=3 color=Red>Mute\")\n                    node\[\"\{\}_link\".format(layer)].setEnabled(False)\n                    n\[\"disable\"].setValue(True)  # Désactiver ce layer\n\n    # 🔄 Vérifier et mettre à jour isolate_layer_switch\n    isolate_switch = nuke.toNode(\"isolate_layer_switch\")\n    if isolate_switch:\n        solo_active_count = sum(\n            1 for k in node.knobs() if \"_solo\" in k and node\[k].label() == \"<font size=3 color=Red>Solo\")\n        isolate_switch\[\"which\"].setValue(solo_active_count)\n\n    nuke.updateUI()\n\ndef add_label(node, label):\n    node\[\"autolabel\"].setValue(\"'\{\}' + \\\"\\\\n\\\" + nuke.thisNode().name()\".format(label))\n\ndef add_knob_value(node, **kwargs):\n    for knob, value in kwargs.items():\n        if node.knob(knob):\n            node\[knob].setValue(value)\n\ndef basic_move(node, target, x=0, y=0):\n    \"\"\"base function for moving nodes relative to each other. node_one is\n    always relative to node_two\n    \"\"\"\n    target_coord = NodeCoord(target)\n    node_coord = NodeCoord(node)\n    x_axis = (target_coord.cent_x - (node_coord.width // 2)) + x\n    y_axis = (target_coord.cent_y - (node_coord.height // 2)) + y\n    node\[\"xpos\"].setValue(x_axis)\n    node\[\"ypos\"].setValue(y_axis)\n\ndef under(node, target, offset=100):\n    basic_move(node, target, y=offset)\n\nif __name__ == \"__main__\":\n    add_layer()" +STARTLINE}
 addUserKnob {22 layers_options_clear_all_pyscript l "<font size=3><b>Clear All" -STARTLINE T "import nuke\n\ndef clear_all():\n    remove_buttons = \[r for r in nuke.thisNode().knobs() if '_remove' in r]\n    for r in remove_buttons:\n        nuke.thisNode()\[r].execute()\n    \n    # Une fois que tous les layers sont supprimés, on remet layer_count à 0\n    nuke.thisNode()\[\"layer_count\"].setValue(0)\n\nclear_all()\n\n"}
 addUserKnob {22 layers_options_clear_muted_pyscript l "<font size=3><b>Clear Muted" -STARTLINE T "import nuke\n\ndef clear_muted():\n    n = nuke.thisNode()\n    nodes = nuke.allNodes()\n    for node in nodes:\n        if \"_out\" in node.name():\n            node\[\"disable\"].setValue(0)\n            node\[\"Achannels\"].setEnabled(True)\n            n\[node.name().replace(\"_out\", \"_mute\")].setLabel(\"<font size=3 color=White>Mute\")\n\nclear_muted()\n\n#import add_layer\n#add_layer.clear_muted()"}
 addUserKnob {3 layer_count l "" -STARTLINE}
 addUserKnob {26 divider_01 l "" +STARTLINE T " "}
 addUserKnob {26 aovs_layers_text l "@b;Layers:"}
 addUserKnob {1 settings_label_input l "@b;Label Me!" +INVISIBLE}
 addUserKnob {26 divider_02 l "" +STARTLINE T " "}
 addUserKnob {26 settings_grade_text l "@b;Grade:"}
 addUserKnob {7 settings_grade_saturation_slider l saturation}
 settings_grade_saturation_slider 1
 addUserKnob {26 divider_03 l "" +STARTLINE}
 addUserKnob {41 blackpoint T grade_node.blackpoint}
 addUserKnob {41 whitepoint T grade_node.whitepoint}
 addUserKnob {41 black l lift T grade_node.black}
 addUserKnob {41 white l gain T grade_node.white}
 addUserKnob {41 multiply T grade_node.multiply}
 addUserKnob {41 add l offset T grade_node.add}
 addUserKnob {41 gamma T grade_node.gamma}
 addUserKnob {26 divider_04 l "" +STARTLINE}
 addUserKnob {7 settings_grade_mix_slider l mix}
 settings_grade_mix_slider 1
 addUserKnob {26 divider_05 l "" +STARTLINE T " "}
 addUserKnob {26 settings_mask_text l "@b;Mask:"}
 addUserKnob {41 maskChannelMask l mask -STARTLINE T grade_node.maskChannelMask}
 addUserKnob {41 invert_mask l invert -STARTLINE T grade_node.invert_mask}
 addUserKnob {6 settings_mask_isolate_check l "isolate mask" -STARTLINE}
 addUserKnob {41 unpremult l "(un)premult by" T grade_node.unpremult}
 addUserKnob {26 divider_06 l "" +STARTLINE T " "}
 addUserKnob {26 credit l "@b;Credit:" +INVISIBLE}
 addUserKnob {26 titre2 l "" +STARTLINE +INVISIBLE T "\n<a href=\"https://github.com/Duckydav\" style=\"text-decoration:none; color:#A2A1A1\">\nGrade<b><font color=\"#545454\"> Pass</font></b> v01.2 &copy; 2024\n"}
 addUserKnob {22 remove_layer_pyscript l "Remove Layer" -STARTLINE +INVISIBLE T "\n\ndef remove_layer(layer_name, autolabel):\n    node = nuke.thisNode()\n\n    # Mise à jour de l'Autolabel\n    autolabel_list = node\['autolabel'].value()\n    new_list = autolabel_list.replace('+ \"\\n\" \{\}'.format(autolabel), '')\n    node\['autolabel'].setValue(new_list)\n\n    # Suppression des knobs associés\n    knobs_to_remove = \['\{\}_mute'.format(layer_name), '\{\}_link'.format(layer_name), '\{\}_remove'.format(layer_name), '\{\}_solo'.format(layer_name)]\n    for knob in knobs_to_remove:\n        if knob in node.knobs():\n            node.removeKnob(node.knobs()\[knob])\n\n    # Suppression des nœuds associés\n    for n in nuke.allNodes():\n        if layer_name in n.name():\n            nuke.delete(n)\n\n    # Rafraîchir l'UI\n    nuke.updateUI()\n    nuke.show(node)\n"}
 addUserKnob {22 mute_layer_pyscript l "Mute Layer" -STARTLINE +INVISIBLE T "\ndef mute_layer(layer_name):\n    node = nuke.thisNode()\n    merge_node = nuke.toNode('\{\}_out'.format(layer_name))\n    if not merge_node:\n        return\n\n    node_state = merge_node\['disable'].value()\n    if node_state:\n        node\['\{\}_mute'.format(layer_name)].setLabel('<font size=3 color=White>Mute')\n        node\['\{\}_link'.format(layer_name)].setEnabled(True)\n        merge_node\['disable'].setValue(0)\n    else:\n        node\['\{\}_mute'.format(layer_name)].setLabel('<font size=3 color=Red>Mute')\n        node\['\{\}_link'.format(layer_name)].setEnabled(False)\n        merge_node\['disable'].setValue(1)\n"}
 addUserKnob {22 solo_layer_pyscript l "Solo Layer" -STARTLINE +INVISIBLE T "\ndef solo_layer(layer_name):\n    node = nuke.thisNode()\n    nodes = nuke.allNodes()\n\n    solo_active = node\['\{\}_solo'.format(layer_name)].label() == '<font size=3 color=Red>Solo'\n\n    for n in nodes:\n        if '_out' in n.name():\n            layer = n.name().replace('_out', '')\n            is_selected = (layer == layer_name)\n\n            if solo_active:\n                # Désactiver Solo et réactiver les autres\n                node\['\{\}_mute'.format(layer)].setEnabled(True)\n                node\['\{\}_mute'.format(layer)].setValue(0)\n                node\['\{\}_link'.format(layer)].setEnabled(True)\n                node\['\{\}_solo'.format(layer)].setLabel('<font size=3 color=White>Solo')\n\n            else:\n                if is_selected:\n                    # Activer Solo\n                    node\['\{\}_solo'.format(layer_name)].setLabel('<font size=3 color=Red>Solo')\n                    node\['\{\}_mute'.format(layer_name)].setEnabled(True)\n                    node\['\{\}_link'.format(layer_name)].setEnabled(True)\n                else:\n                    # Désactiver et muter les autres layers\n                    node\['\{\}_mute'.format(layer_name)].setValue(1)\n                    node\['\{\}_mute'.format(layer_name)].setEnabled(False)\n                    node\['\{\}_link'.format(layer_name)].setEnabled(False)\n\n    isolate_switch = nuke.toNode('isolate_layer_switch')\n    if isolate_switch:\n        solo_buttons = \[node\[k] for k in node.knobs() if '_solo' in k]\n        solo_active_count = sum(1 for btn in solo_buttons if btn.label() == '<font size=3 color=Red>Solo')\n\n        isolate_switch\['which'].setValue(1 if solo_active_count > 0 else 0)\n\n    nuke.updateUI()\n"}
 addUserKnob {22 update_switch_pyscript l "Update Switch" -STARTLINE +INVISIBLE T "\nisolate_switch = nuke.toNode('isolate_layer_switch')\nif isolate_switch:\n    solo_knobs = \[knob for knob in nuke.thisNode().knobs() if '_solo' in knob]\n    expression = 'max(\{\})'.format(', '.join(\['parent.' + k for k in solo_knobs])) if solo_knobs else '0'\n    isolate_switch\['which'].setExpression(expression)\n"}
}
 Input {
  inputs 0
  name mask
  xpos 1280
  ypos 878
  number 1
 }
 Dot {
  name Dot2
  xpos 1314
  ypos 978
 }
set N3baf01b0 [stack 0]
push $N3baf01b0
 Dot {
  name Dot4
  xpos 1424
  ypos 978
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 white -1 -1 rgba.alpha 0 3"
  name white_alpha
  xpos 1390
  ypos 1046
 }
 Switch {
  inputs 2
  which {{"\[exists parent.input1]"}}
  name original_alpha_to_mask_switch
  xpos 1280
  ypos 1046
 }
 Dot {
  name Dot1
  xpos 1314
  ypos 1122
 }
set N398b84f0 [stack 0]
 Dot {
  name Dot3
  xpos 1314
  ypos 1194
 }
push $N398b84f0
 Input {
  inputs 0
  name bty
  xpos 510
  ypos 254
 }
 Dot {
  name input_dot
  xpos 544
  ypos 354
 }
set N3a920dc0 [stack 0]
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name make_bty_black
  xpos 950
  ypos 350
 }
 Dot {
  name out_builder_dot
  label "Out builder"
  xpos 984
  ypos 1026
 }
set N3ab208b0 [stack 0]
 Saturation {
  inputs 1+1
  channels all
  saturation {{"settings_grade_saturation_slider < 1 ? settings_grade_saturation_slider: 1"}}
  maskChannelMask {{{Grade_node.maskChannelMask}}}
  invert_mask {{grade_node.invert_mask.left}}
  unpremult {{{parent.grade_node.unpremult}}}
  mix {{settings_grade_mix_slider}}
  name saturation_node
  xpos 950
  ypos 1112
 }
 Grade {
  inputs 1+1
  channels all
  unpremult -rgba.alpha
  mix {{settings_grade_mix_slider}}
  name grade_node
  xpos 950
  ypos 1184
 }
set Nfea4600 [stack 0]
 Dot {
  name graded_builder_dot
  label "Graded builder"
  xpos 984
  ypos 2010
 }
push $Nfea4600
push $N3ab208b0
push $N3a920dc0
 Merge2 {
  inputs 2
  operation from
  name Merge1
  xpos 510
  ypos 1022
 }
 Merge2 {
  inputs 2
  operation plus
  name plus_bty
  xpos 510
  ypos 1190
 }
 Dot {
  name in_builder_dot
  label "In builder"
  xpos 544
  ypos 2010
 }
 Dot {
  name Dot6
  xpos 544
  ypos 2082
 }
 Switch {
  inputs 2
  name isolate_layer_switch
  xpos 950
  ypos 2078
 }
 Output {
  name Output1
  xpos 950
  ypos 2174
 }
end_group
